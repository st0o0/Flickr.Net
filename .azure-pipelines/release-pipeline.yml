trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    exclude:
      - ".github"
      - docs
      - README.md
      - CHANGELOG.md
      - CONTRIBUTING.md

pr:
  branches:
    include:
      - dev
  autoCancel: true
  drafts: false

variables:
  - template: variables.yml

stages:
  - stage: Build
    displayName: ðŸš§ Build
    jobs:
      - job: Build
        displayName: Build with .NET Core SDK
        pool:
          vmImage: $(vmImage)
        steps:
          - checkout: self
            fetchDepth: 0
            persistCredentials: true

          - task: UseDotNet@2
            displayName: Install .NET SDK
            inputs:
              packageType: sdk
              version: $(netSdkVersion)

          - task: DotNetCoreCLI@2
            displayName: "Restore NuGet dependencies"
            inputs:
              command: "restore"
              projects: "$(projectPath)"
              feedsToUse: "select"
              vstsFeed: $(internalFeedName)
              includeNuGetOrg: true

          - task: gitversion/setup@0
            displayName: "Setup git version"
            inputs:
              versionSpec: "5.12"

          - task: gitversion/execute@0
            displayName: "Calculate git version"
            inputs:
              additionalArguments: "/updateprojectfiles"

          - task: DotNetCoreCLI@2
            displayName: "Build projects [$(buildConfiguration)]"
            inputs:
              command: "build"
              projects: "$(projectPath)"
              arguments: "--configuration $(buildConfiguration) --no-restore"
              versioningScheme: byEnvVar
              versionEnvVar: "GitVersion.SemVer"

          - task: DotNetCoreCLI@2
            displayName: "Create NuGet package"
            inputs:
              command: "pack"
              packagesToPack: "**/*.csproj;!**/*.Test.csproj"
              versioningScheme: "byEnvVar"
              versionEnvVar: "GitVersion.NuGetVersion"
              packDirectory: $(Build.ArtifactStagingDirectory)/packages/
              configuration: $(buildConfiguration)

          - publish: $(Build.ArtifactStagingDirectory)/packages
            artifact: packages

  - stage: Test
    dependsOn: Build
    displayName: ðŸ§ª Test
    jobs:
      - job: Test
        displayName: Run test
        pool:
          vmImage: $(vmImage)
        steps:
          - task: UseDotNet@2
            displayName: Install .NET sdk
            inputs:
              packageType: sdk
              version: $(netSdkVersion)

          - task: DotNetCoreCLI@2
            displayName: "Run unit tests"
            inputs:
              command: "test"
              projects: "**/*.@(Test|Tests).csproj"
              arguments: >-
                --configuration $(buildConfiguration) 
                --collect:"XPlat Code Coverage"
                -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
                   DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByFile=**/obj/**
              publishTestResults: true

          - task: PublishCodeCoverageResults@1
            displayName: "Publish code coverage"
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(Agent.TempDirectory)/*/coverage.cobertura.xml

  - stage: PublishArtifacts
    dependsOn: Build
    displayName: ðŸ“¤ Publish artifacts
    jobs:
      - deployment: "DeployToNuget"
        environment: "NugetRelease"
        displayName: Publish artifacts
        pool:
          vmImage: $(vmImage)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  fetchDepth: 0
                  persistCredentials: true
                - download: current
                  artifact: packages

                - task: UseDotNet@2
                  displayName: Install .NET sdk
                  inputs:
                    packageType: sdk
                    version: $(netSdkVersion)

                - task: gitversion/setup@0
                  displayName: "Setup git version"
                  inputs:
                    versionSpec: "5.12"

                - task: gitversion/execute@0
                  displayName: "Calculate git version"
                  inputs:
                    additionalArguments: "/updateprojectfiles"

                - task: NuGetCommand@2
                  displayName: Push CI Packages To Orga Feed
                  inputs:
                    command: "push"
                    packagesToPush: "$(Pipeline.Workspace)/packages/*.*upkg"
                    nuGetFeedType: "internal"
                    publishVstsFeed: "df073d1b-6358-4e76-b320-21161d87d536/4089c11d-57f8-4cc1-845f-8811a243c480"
                    allowPackageConflicts: true

                - task: NuGetCommand@2
                  displayName: Push CI Packages To Nuget
                  inputs:
                    command: "push"
                    packagesToPush: "$(Pipeline.Workspace)/packages/*.*upkg"
                    nuGetFeedType: "external"
                    publishFeedCredentials: "nuget"

                - task: GitHubRelease@0
                  displayName: Create Github Release
                  inputs:
                    action: create
                    target: $(Build.SourceVersion)
                    tagSource: manual
                    tag: $(GitVersion.NuGetVersion)
                    tagPattern: $(GitVersion.NuGetVersion)
                    title: $(GitVersion.NuGetVersion)
                    githubConnection: githubRelease
                    repositoryName: $(Build.Repository.Name)
                    isPreRelease: false
                    addChangeLog: true
                    assets: "$(Pipeline.Workspace)/packages/*.*upkg"
