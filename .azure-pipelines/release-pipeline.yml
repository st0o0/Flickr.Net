trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    exclude:
      - '.github'
      - docs
      - README.md
      - CHANGELOG.md
      - CONTRIBUTING.md

pr: none

variables:
  - template: variables.yml

pool:
  vmImage: '$(vmImage)'

steps:
  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  - task: UseDotNet@2
    displayName: Install .NET sdk
    inputs:
      packageType: sdk
      version: '$(netSdkVersion)'

  - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj;!**/*.Test.csproj'
        feedsToUse: 'select'
        vstsFeed: $(internalFeedName)
        includeNuGetOrg: true  

  - task: gitversion/setup@0
    displayName: 'Setup git version'
    inputs:
      versionSpec: '5.x'

  - task: gitversion/execute@0
    displayName: 'Calculate git version'
    inputs:
      additionalArguments: '/updateprojectfiles'

  - task: DotNetCoreCLI@2
    displayName: 'Build projects [$(buildConfiguration)]'
    inputs:
      command: 'build'
      projects: '$(projectPath)'
      arguments: '--configuration $(buildConfiguration) --no-restore'
      versioningScheme: byEnvVar
      versionEnvVar: 'GitVersion.SemVer'

  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests'
    inputs:
      command: 'test'
      projects: '**/*.@(Test|Tests).csproj'
      arguments: >-
        --no-build
        --configuration $(buildConfiguration)
        --logger "trx;LogFileName=testresults.trx"
      publishTestResults: true
        
  - task: DotNetCoreCLI@2
    displayName: 'Create NuGet package'
    inputs:
      command: 'pack'
      packagesToPack: '**/*.csproj;!**/*.Test.csproj'
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'GitVersion.NuGetVersion'

  - task: NuGetCommand@2
    displayName: 'Push NuGet package'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      vstsFeed: $(internalFeedName)
      publishVstsFeed: $(internalFeedName)

  - task: GitHubRelease@0
    inputs:
      action: create
      target: $(Build.SourceVersion)
      tagSource: manual
      tag: v$(GitVersion.NuGetVersion)
      tagPattern: v$(GitVersion.NuGetVersion)
      title: v$(GitVersion.NuGetVersion)
      githubConnection: githubRelease
      repositoryName: $(Build.Repository.Name)
      isPreRelease: false
      addChangeLog: false
      assets: $(Build.ArtifactStagingDirectory)/packages/*
    displayName: Create Github Release