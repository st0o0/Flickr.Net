trigger:
- master
- development

parameters:
- name: dotnetProjectName
  type: string
  # example: Adva.Hugin.Core

# Optional Parameters
- name: buildConfiguration
  type: string
  default: Release

- name: projectPath
  type: string
  default: src
  # Path where the solution and the csproj folders are

- name: dotnetProjects
  type: string
  default: '**/*.csproj'
  # Path to all .csproj files to restore and build, can be used to exclude some projects on demand, e.g. projects that don't compile on windows.
  # example: |
  #   **/*.csproj
  #   !**/*.WindowsGui.csproj

- name: testsAreMandatory
  type: boolean
  default: true
  # Set to false if project contains no tests, then the build won't fail if tests don't exist

variables:
  #Translate parameters to variables for easier usage
  buildConfiguration: ${{ parameters.buildConfiguration }}
  projectPath: ${{ parameters.projectPath }}
  sonarProjectName: $[replace(variables['Build.Repository.Name'], '/', '-')]
  isPr: $[eq(variables['Build.Reason'], 'PullRequest')]

stages:
- stage: build
  pool:
    vmImage: 'ubuntu-latest' # MS hosted agents
    #name: default           # Self hosted agents
  jobs:
  - job: build
    steps:

    - checkout: self
      persistCredentials: true
      fetchDepth: 0

    - pwsh: |
        $buildReason = "$(Build.Reason)"
        $imageFast = "False"

        if($buildReason -eq "PullRequest") {
            echo "Is PullRequest"

            $fastMode = "$(fastMode)"
            $commit = "$(system.pullRequest.sourceCommitId)"
            $commitMessage = git log --format=%B -n 1 "$commit"

            echo "Commit ----------------"
            echo $commitMessage
            echo "-----------------------"

            if($commitMessage -like "*+lks:fastmode*"){
                echo "+lks fastmode detected"
                $imageFast = "True"
            }
            if($fastMode -eq "true"){
                echo "Parameter fastMode set to true"
                $imageFast = "True"
            }
        }

        echo "RESULT ---------------------"
        echo "Fastmode set to: $imageFast"

        Write-Host "##vso[task.setvariable variable=imageFast;]$imageFast"
      displayName: Determine fastmode

    - pwsh: |
        $imageFast = "False"
        echo "Determine LKS Flags"

        $url = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/git/pullrequests/$(System.PullRequest.PullRequestId)?api-version=7.0"
        $headers = @{
            Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
        }

        $pullRequest = Invoke-RestMethod -Uri $url -Method 'Get' -ContentType 'application/json' -Headers $headers
        $jsonString = "$($pullRequest | ConvertTo-Json -Depth 100)"
        $jsonObj = $jsonString | ConvertFrom-Json

        if ($($jsonObj).title -like "*+lks:fastmode*") { 
            $imagefast = "True"
            echo "Parameter fastMode set to true"
            Write-Host "##vso[task.setvariable variable=imageFast;]$imageFast"
        } else {
            echo "No +lks:fastmode token found. Fastmode unmodified"
        }
      displayName: Determine LKS flags
      continueOnError: true
      condition: eq(variables['Build.Reason'], 'PullRequest')
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

    - script: |
        echo "PIPELINE PARAMETERS -----------------------------------"
        echo "${{ convertToJson(parameters) }}"
        echo "PIPELINE VARIABLES ------------------------------------"
        echo "buildConfiguration: $(buildConfiguration)"
        echo "projectPath: $(projectPath)"
        echo "sonarProjectName: $(sonarProjectName)"
        echo "imageFast: $(imageFast)"
        echo "build.sourcversionmessage $(Build.SourceVersionMessage)"
        echo "build $(system.pullRequest.sourceCommitId)"
      displayName: Print template parameters & variables

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet dependencies'
      inputs:
        command: 'restore'
        projects: '${{ parameters.dotnetProjects }}'
        feedsToUse: 'config'
        nugetConfigPath: '$(projectPath)/nuget.config'

    - task: gitversion/setup@0
      displayName: 'Setup git version'
      inputs:
        versionSpec: '5.x'

    - task: gitversion/execute@0
      displayName: 'Calculate git version'
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)'
        additionalArguments: '/updateprojectfiles'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'Sonarcloud'
        organization: 'advastore'
        scannerMode: 'MSBuild'
        projectKey: 'advastore_$(sonarProjectName)'
        projectName: '$(sonarProjectName)'
        extraProperties: |
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)\**\*.trx
          sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)\**\coverage.opencover.xml
      condition: eq(variables['imageFast'], 'false')

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '${{ parameters.dotnetProjects }}'
        arguments: '--configuration $(buildConfiguration) --no-restore'
        versioningScheme: byEnvVar
        versionEnvVar: 'GitVersion.SemVer'
      displayName: 'Build projects [$(buildConfiguration)]'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: '**/*.@(Test|Tests).csproj'
        arguments: >-
          --no-build
          --configuration $(buildConfiguration)
          --collect:"XPlat Code Coverage"
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
             DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByFile=**/obj/**
             RunConfiguration.TreatNoTestsAsError=${{parameters.testsAreMandatory}}
        publishTestResults: true
      condition: eq(variables['imageFast'], 'false')


    - task: DotNetCoreCLI@2
      displayName: 'Create NuGet package'
      inputs:
        command: 'pack'
        packagesToPack: '**/*.csproj;!**/*.Test.csproj'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'GitVersion.NuGetVersion'

    - task: NuGetCommand@2
      displayName: 'Push NuGet package'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
        publishVstsFeed: '7e92eefd-de8e-4cd2-9ff6-680a0ef72b7d'

    - task: CmdLine@2
      displayName: 'Tag versions in git'
      # run only for ci builds and ignore PR builds or scheduled builds
      condition: and(eq(variables['imageFast'], 'false'), and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI')))
      inputs:
        script: |
          git tag v$(GitVersion.NugetVersion)
          git push origin v$(GitVersion.NugetVersion)
        workingDirectory: '$(Build.SourcesDirectory)'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        failIfCoverageEmpty: ${{parameters.testsAreMandatory}}
      condition: eq(variables['imageFast'], 'false')

    - task: SonarCloudAnalyze@1
      condition: eq(variables['imageFast'], 'false')

    - task: SonarCloudPublish@1
      # run only for PR builds
      condition: and(eq(variables['imageFast'], 'false'), and(succeeded(), eq(variables['Build.Reason'], 'PullRequest')))
      inputs:
        pollingTimeoutSec: '300'

    - script: |
        echo "Please enable tests and code analysis before you merge this PR"
        echo "It is disabled either by the fuckItIWantMyImageFast parameter azure-pipelines.yml"
        echo "Or the last commit contained '+lks:fastmode' - make a new commit in this case."
        exit 1
      continueOnError: true
      condition: eq(variables['imageFast'], 'true')
      displayName: Fast mode partial success
